# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'skilltree_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import skilltree
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1125, 429)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.c = QtWidgets.QPushButton(self.centralwidget)
        self.c.setGeometry(QtCore.QRect(220, 70, 71, 71))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.c.sizePolicy().hasHeightForWidth())
        self.c.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(20)
        self.c.setFont(font)
        self.c.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.c.setObjectName("c")
        self.python = QtWidgets.QPushButton(self.centralwidget)
        self.python.setGeometry(QtCore.QRect(760, 70, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(18)
        self.python.setFont(font)
        self.python.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.python.setObjectName("python")
        self.stc51 = QtWidgets.QPushButton(self.centralwidget)
        self.stc51.setGeometry(QtCore.QRect(40, 170, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(20)
        self.stc51.setFont(font)
        self.stc51.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.stc51.setObjectName("stc51")
        self.cpp = QtWidgets.QPushButton(self.centralwidget)
        self.cpp.setGeometry(QtCore.QRect(220, 170, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(20)
        self.cpp.setFont(font)
        self.cpp.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.cpp.setObjectName("cpp")
        self.arduino = QtWidgets.QPushButton(self.centralwidget)
        self.arduino.setGeometry(QtCore.QRect(400, 170, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(18)
        self.arduino.setFont(font)
        self.arduino.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.arduino.setObjectName("arduino")
        self.stm32 = QtWidgets.QPushButton(self.centralwidget)
        self.stm32.setGeometry(QtCore.QRect(40, 270, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(16)
        self.stm32.setFont(font)
        self.stm32.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.stm32.setObjectName("stm32")
        self.ros = QtWidgets.QPushButton(self.centralwidget)
        self.ros.setGeometry(QtCore.QRect(220, 270, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(20)
        self.ros.setFont(font)
        self.ros.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.ros.setObjectName("ros")
        self.opencvCpp = QtWidgets.QPushButton(self.centralwidget)
        self.opencvCpp.setGeometry(QtCore.QRect(400, 270, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(16)
        self.opencvCpp.setFont(font)
        self.opencvCpp.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.opencvCpp.setObjectName("opencvCpp")
        self.raspberry = QtWidgets.QPushButton(self.centralwidget)
        self.raspberry.setGeometry(QtCore.QRect(580, 170, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.raspberry.setFont(font)
        self.raspberry.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.raspberry.setObjectName("raspberry")
        self.opencvPython = QtWidgets.QPushButton(self.centralwidget)
        self.opencvPython.setGeometry(QtCore.QRect(940, 170, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(16)
        self.opencvPython.setFont(font)
        self.opencvPython.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.opencvPython.setObjectName("opencvPython")
        self.numpy = QtWidgets.QPushButton(self.centralwidget)
        self.numpy.setGeometry(QtCore.QRect(760, 170, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(18)
        self.numpy.setFont(font)
        self.numpy.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.numpy.setObjectName("numpy")
        self.pytorch = QtWidgets.QPushButton(self.centralwidget)
        self.pytorch.setGeometry(QtCore.QRect(760, 270, 71, 71))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(18)
        self.pytorch.setFont(font)
        self.pytorch.setStyleSheet("border-image: url(resource/Skillnode_locked.png); color: \"white\"")
        self.pytorch.setObjectName("pytorch")
        self.day = QtWidgets.QLabel(self.centralwidget)
        self.day.setGeometry(QtCore.QRect(1000, 30, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPixelSize(20)
        self.day.setFont(font)
        self.day.setObjectName("day")
        self.labelc = QtWidgets.QLabel(self.centralwidget)
        self.labelc.setGeometry(QtCore.QRect(300, 70, 81, 71))
        self.labelc.setObjectName("labelc")
        self.labelpython = QtWidgets.QLabel(self.centralwidget)
        self.labelpython.setGeometry(QtCore.QRect(840, 70, 81, 71))
        self.labelpython.setObjectName("labelpython")
        self.labelstc51 = QtWidgets.QLabel(self.centralwidget)
        self.labelstc51.setGeometry(QtCore.QRect(120, 170, 81, 71))
        self.labelstc51.setObjectName("labelstc51")
        self.labelstm32 = QtWidgets.QLabel(self.centralwidget)
        self.labelstm32.setGeometry(QtCore.QRect(120, 270, 81, 71))
        self.labelstm32.setObjectName("labelstm32")
        self.labelcpp = QtWidgets.QLabel(self.centralwidget)
        self.labelcpp.setGeometry(QtCore.QRect(300, 170, 81, 71))
        self.labelcpp.setObjectName("labelcpp")
        self.labelros = QtWidgets.QLabel(self.centralwidget)
        self.labelros.setGeometry(QtCore.QRect(300, 270, 81, 71))
        self.labelros.setObjectName("labelros")
        self.labelarduino = QtWidgets.QLabel(self.centralwidget)
        self.labelarduino.setGeometry(QtCore.QRect(480, 170, 81, 71))
        self.labelarduino.setObjectName("labelarduino")
        self.labelopencvcpp = QtWidgets.QLabel(self.centralwidget)
        self.labelopencvcpp.setGeometry(QtCore.QRect(480, 270, 81, 71))
        self.labelopencvcpp.setObjectName("labelopencvcpp")
        self.labelraspberry = QtWidgets.QLabel(self.centralwidget)
        self.labelraspberry.setGeometry(QtCore.QRect(660, 170, 81, 71))
        self.labelraspberry.setObjectName("labelraspberry")
        self.labelnumpy = QtWidgets.QLabel(self.centralwidget)
        self.labelnumpy.setGeometry(QtCore.QRect(840, 170, 81, 71))
        self.labelnumpy.setObjectName("labelnumpy")
        self.labelpytorch = QtWidgets.QLabel(self.centralwidget)
        self.labelpytorch.setGeometry(QtCore.QRect(840, 270, 81, 71))
        self.labelpytorch.setObjectName("labelpytorch")
        self.labelopencvpy = QtWidgets.QLabel(self.centralwidget)
        self.labelopencvpy.setGeometry(QtCore.QRect(1020, 170, 81, 71))
        self.labelopencvpy.setObjectName("labelopencvpy")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1125, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SkillTree"))
        self.c.setText(_translate("MainWindow", "C"))
        self.python.setText(_translate("MainWindow", "Python"))
        self.stc51.setText(_translate("MainWindow", "51"))
        self.cpp.setText(_translate("MainWindow", "C++"))
        self.arduino.setText(_translate("MainWindow", "Arduino"))
        self.stm32.setText(_translate("MainWindow", "STM32"))
        self.ros.setText(_translate("MainWindow", "ROS"))
        self.opencvCpp.setText(_translate("MainWindow", "OpenCV\n"
"C++"))
        self.raspberry.setText(_translate("MainWindow", "Raspberry"))
        self.opencvPython.setText(_translate("MainWindow", "OpenCV\n"
"Python"))
        self.numpy.setText(_translate("MainWindow", "numpy"))
        self.pytorch.setText(_translate("MainWindow", "pytorch"))
        self.day.setText(_translate("MainWindow", "Day:"))

        font = QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(16)
        self.labelc.setText(_translate("MainWindow", self.status(skilltree.c)))
        self.labelc.setFont(font)
        self.labelpython.setText(_translate("MainWindow", self.status(skilltree.python)))
        self.labelpython.setFont(font)
        self.labelstc51.setText(_translate("MainWindow", self.status(skilltree.stc51)))
        self.labelstc51.setFont(font)
        self.labelstm32.setText(_translate("MainWindow", self.status(skilltree.stm32)))
        self.labelstm32.setFont(font)
        self.labelcpp.setText(_translate("MainWindow", self.status(skilltree.cpp)))
        self.labelcpp.setFont(font)
        self.labelros.setText(_translate("MainWindow", self.status(skilltree.ros)))
        self.labelros.setFont(font)
        self.labelarduino.setText(_translate("MainWindow", self.status(skilltree.arduino)))
        self.labelarduino.setFont(font)
        self.labelopencvcpp.setText(_translate("MainWindow", self.status(skilltree.opencvcpp)))
        self.labelopencvcpp.setFont(font)
        self.labelraspberry.setText(_translate("MainWindow", self.status(skilltree.raspberry)))
        self.labelraspberry.setFont(font)
        self.labelnumpy.setText(_translate("MainWindow", self.status(skilltree.numpy)))
        self.labelnumpy.setFont(font)
        self.labelpytorch.setText(_translate("MainWindow", self.status(skilltree.pytorch)))
        self.labelpytorch.setFont(font)
        self.labelopencvpy.setText(_translate("MainWindow", self.status(skilltree.opencvpy)))
        self.labelopencvpy.setFont(font)
        
        self.c.clicked.connect(lambda: self.learn(skilltree.c, self.c, self.labelc))
        self.python.clicked.connect(lambda: self.learn(skilltree.python, self.python, self.labelpython))
        self.stc51.clicked.connect(lambda: self.learn(skilltree.stc51, self.stc51, self.labelstc51))
        self.stm32.clicked.connect(lambda: self.learn(skilltree.stm32, self.stm32, self.labelstm32))
        self.cpp.clicked.connect(lambda: self.learn(skilltree.cpp, self.cpp, self.labelcpp))
        self.ros.clicked.connect(lambda: self.learn(skilltree.ros, self.ros, self.labelros))
        self.arduino.clicked.connect(lambda: self.learn(skilltree.arduino, self.arduino, self.labelarduino))
        self.opencvCpp.clicked.connect(lambda: self.learn(skilltree.opencvcpp, self.opencvCpp, self.labelopencvcpp))
        self.raspberry.clicked.connect(lambda: self.learn(skilltree.raspberry, self.raspberry, self.labelraspberry))
        self.numpy.clicked.connect(lambda: self.learn(skilltree.numpy, self.numpy, self.labelnumpy))
        self.pytorch.clicked.connect(lambda: self.learn(skilltree.pytorch, self.pytorch, self.labelpytorch))
        self.opencvPython.clicked.connect(lambda: self.learn(skilltree.opencvpy, self.opencvPython, self.labelopencvpy))
        
                               
    def learn(self, node, button, label):
        node.learn()
        label.setText(self.status(node))
        font = QFont()
        font.setFamily("Agency FB")
        font.setPixelSize(16)
        label.setFont(font)
        self.day.setText("Day: " + str(node.timeSpent))
        if (node.check_proficient()):
            button.setStyleSheet("border-image: url(resource/Skillnode_unlocked.png); color: \"white\"")



    def status(self, node):
        return "Skillpoints : {0}\nLocked : {1}\nProficient: {2}" \
               .format(str(node.skillPoints), str(node.locked), str(node.proficient))


